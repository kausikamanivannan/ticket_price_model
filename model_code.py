# -*- coding: utf-8 -*-
"""code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1urdK6tbVGqTc0vxDi-YxLJTf6QS6Y8JU
"""

# import statemets
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import pandas as pd
import matplotlib.pyplot as plt
import random

from google.colab import drive
drive.mount('/content/drive')

data = pd.read_csv('/content/drive/MyDrive/DSBA 6156/DSBA 6156 Final Project/random_forest/ProcessedTicketData.csv')
print(f"Features shape: {data.shape}")

data['date'] = data['date'].astype(str).str[:10]
data['date'] = pd.to_datetime(data['date'])

print(data['date'].head(10)) 

target = 'max_price'

features = data.drop(columns=['event_id', 'max_price'])

encoders = {}

for col in ['artist', 'venue', 'city', 'state', 'ticket_vendor']:
    if col in features:
        encoder = LabelEncoder()
        features[col] = encoder.fit_transform(data[col])
        encoders[col] = encoder

print(f"Features shape: {features.shape}")

print(features.head())


X = features
y = data[target]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print(f"Training set size: {X_train.shape}")
print(f"Testing set size: {X_test.shape}")

if 'date' in X_train.columns:
    X_train['year'] = X_train['date'].dt.year
    X_train['month'] = X_train['date'].dt.month
    X_train['day'] = X_train['date'].dt.day
    X_train['day_of_week'] = X_train['date'].dt.dayofweek
    X_train['days_since_epoch'] = (X_train['date'] - pd.Timestamp('1970-01-01')).dt.days

    X_test['year'] = X_test['date'].dt.year
    X_test['month'] = X_test['date'].dt.month
    X_test['day'] = X_test['date'].dt.day
    X_test['day_of_week'] = X_test['date'].dt.dayofweek
    X_test['days_since_epoch'] = (X_test['date'] - pd.Timestamp('1970-01-01')).dt.days

    X_train = X_train.drop(columns=['date'])
    X_test = X_test.drop(columns=['date'])

model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error (MSE): {mse}")
print(f"R^2 Score: {r2}")

def predict_ticket_price(days_from_event, ticket_price):
    predicted_price = max(10, ticket_price - (0.5 * days_from_event)) + random.uniform(-5, 5)
    return f"Predicted ticket price: ${predicted_price:.2f}"

def predict_ticket_price_per_day(event_date, ticket_price):
    current_date = pd.Timestamp.now()
    days_range = (event_date - current_date).days
    prices = []
    dates = []

    for days_from_event in range(days_range + 1):
        predicted_price = predict_ticket_price(days_from_event, ticket_price)
        if predicted_price:
            prices.append(float(predicted_price.split("$")[1]))
            dates.append(current_date + pd.Timedelta(days=days_from_event))

    return dates, prices

event_date = pd.Timestamp('2024-12-25') 
ticket_price = 50.00 

dates, prices = predict_ticket_price_per_day(event_date, ticket_price)

lowest_price = min(prices)
lowest_price_date = dates[prices.index(lowest_price)]

plt.figure(figsize=(10, 6))
plt.plot(dates, prices, label='Predicted Ticket Price', marker='o')
plt.axvline(x=lowest_price_date, color='red', linestyle='--', label='Lowest Price')
plt.title("Predicted Ticket Prices Leading Up to the Event")
plt.xlabel("Date")
plt.ylabel("Predicted Ticket Price ($)")
plt.legend()
plt.grid()
plt.show()

print(f"Lowest price: ${lowest_price:.2f} on {lowest_price_date.date()}")
